from flask import Flask, request, jsonify, render_template
import yfinance as yf
from datetime import datetime

app = Flask(__name__)

# In-memory database for simplicity
portfolio = []

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/api/portfolio', methods=['GET', 'POST', 'PUT', 'DELETE'])
def manage_portfolio():
    global portfolio
    
    if request.method == 'POST':
        data = request.json
        portfolio.append({
            "id": len(portfolio) + 1,
            "symbol": data['symbol'],
            "quantity": data['quantity'],
            "purchase_price": data['purchase_price'],
            "purchase_date": data['purchase_date']
        })
        return jsonify({"message": "Stock added to portfolio!"}), 201

    elif request.method == 'GET':
        return jsonify(portfolio), 200

    elif request.method == 'PUT':
        data = request.json
        for stock in portfolio:
            if stock['id'] == data['id']:
                stock['symbol'] = data.get('symbol', stock['symbol'])
                stock['quantity'] = data.get('quantity', stock['quantity'])
                stock['purchase_price'] = data.get('purchase_price', stock['purchase_price'])
                stock['purchase_date'] = data.get('purchase_date', stock['purchase_date'])
                return jsonify({"message": "Stock updated!"}), 200
        return jsonify({"message": "Stock not found!"}), 404

    elif request.method == 'DELETE':
        data = request.json
        portfolio = [stock for stock in portfolio if stock['id'] != data['id']]
        return jsonify({"message": "Stock removed from portfolio!"}), 200

@app.route('/api/portfolio/value', methods=['GET'])
def portfolio_value():
    total_value = 0
    detailed_data = []

    for stock in portfolio:
        ticker = yf.Ticker(stock['symbol'])
        current_price = ticker.history(period='1d')['Close'].iloc[-1]
        stock_value = stock['quantity'] * current_price
        total_value += stock_value

        detailed_data.append({
            "symbol": stock['symbol'],
            "quantity": stock['quantity'],
            "current_price": current_price,
            "stock_value": stock_value
        })

    return jsonify({
        "total_value": total_value,
        "details": detailed_data
    }), 200

@app.route('/api/portfolio/metrics', methods=['GET'])
def portfolio_metrics():
    if not portfolio:
        return jsonify({"message": "Portfolio is empty!"}), 200

    total_value = 0
    top_stock = None
    distribution = {}

    for stock in portfolio:
        ticker = yf.Ticker(stock['symbol'])
        current_price = ticker.history(period='1d')['Close'].iloc[-1]
        stock_value = stock['quantity'] * current_price
        total_value += stock_value

        if not top_stock or stock_value > top_stock['value']:
            top_stock = {"symbol": stock['symbol'], "value": stock_value}

        distribution[stock['symbol']] = distribution.get(stock['symbol'], 0) + stock_value

    return jsonify({
        "total_value": total_value,
        "top_performing_stock": top_stock,
        "portfolio_distribution": distribution
    }), 200

if __name__ == '__main__':
    app.run(debug=True)
